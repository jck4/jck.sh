# AWS playbook
---
- hosts: localhost
  connection: local
  gather_facts: False

  tasks:
    - name: Facts
      block:
        - name: Get instances facts
          ec2_instance_info:
            aws_access_key: "{{AWS_ACCESS_KEY_ID}}"
            aws_secret_key: "{{AWS_SECRET_ACCESS_KEY}}"
            region: "{{ region }}"
          register: ec2_info

        - name: Get vpc facts
          ec2_vpc_net_info:
            aws_access_key: "{{AWS_ACCESS_KEY_ID}}"
            aws_secret_key: "{{AWS_SECRET_ACCESS_KEY}}"
            region: "{{ region }}"
          register: ec2_vpc_info

        - name: Instances ID
          debug:
            msg: "ID: {{ item.instance_id }} - State: {{ item.state.name }} - Public DNS: {{ item.public_dns_name }}"
          loop: "{{ ec2_info.instances }}"

      # - name: vpc(s) info output
      #   debug:
      #     msg: "{{item['cidr']}}"
      #   loop: "{{ ec2_vpc_info }}"

      tags: always

    - name: Provisioning EC2 instances
      block:
        - name: Upload public key to AWS
          ec2_key:
            name: "{{ key_name }}"
            key_material: "{{ lookup('file', '~/.ssh/{{ key_name }}.pub') }}"
            region: "{{ region }}"
            aws_access_key: "{{AWS_ACCESS_KEY_ID}}"
            aws_secret_key: "{{AWS_SECRET_ACCESS_KEY}}"
            state: present

        - name: create VPC
          ec2_vpc_net:
            name: "{{ vpc_name }}"
            cidr_block: "{{ vpc_cidr }}"
            region: "{{ region }}"
            state: present
            aws_access_key: "{{AWS_ACCESS_KEY_ID}}"
            aws_secret_key: "{{AWS_SECRET_ACCESS_KEY}}"
            tags:
              app: "{{app}}"
          register: vpc_info

          
        - name: jck.sh-elb
          ec2_elb_lb:
          state: present
          region: "{{region}}"
          zones:
            - us-west-1a
            - us-west-1b
          listeners:
            - protocol: http
              load_balancer_port: 80
              instance_port: 80
          register: elb

        - name: create and associate subnet to the VPC
          ec2_vpc_subnet:
            state: present
            vpc_id: "{{vpc_info['vpc']['id']}}"
            region: "{{ region }}"
            cidr: "{{ subnet_cidr }}"
            aws_access_key: "{{AWS_ACCESS_KEY_ID}}"
            aws_secret_key: "{{AWS_SECRET_ACCESS_KEY}}"
            map_public: no
            tags:
              app: "{{ app }}"
          register: subnet

          

        - name: create IGW
          ec2_vpc_igw:
            vpc_id: "{{vpc_info['vpc']['id']}}"
            region: "{{ region }}"
            aws_access_key: "{{AWS_ACCESS_KEY_ID}}"
            aws_secret_key: "{{AWS_SECRET_ACCESS_KEY}}"
            state: "present"
            tags:
              Name: "{{ igw_name }}"

          register: igw

        - name: Route IGW
          ec2_vpc_route_table:
            vpc_id: "{{vpc_info['vpc']['id']}}"
            region: "{{ region }}"
            aws_access_key: "{{AWS_ACCESS_KEY_ID}}"
            aws_secret_key: "{{AWS_SECRET_ACCESS_KEY}}"
            subnets:
              - "{{ subnet['subnet']['id'] }}"
            routes:
              - dest: 0.0.0.0/0
                gateway_id: "{{ igw['gateway_id']  }}"
            tags:
              app: "{{ app }}"

        - name: Output vpc info
          debug:
            msg: "{{item}}"
          with_items: "{{vpc_info['vpc']}}"

        - name: provision security group
          ec2_group:
            name: "{{ sec_group }}"
            description: "Sec group for app {{ id }}"
            vpc_id: "{{vpc_info['vpc']['id']}}"
            region: "{{ region }}"
            aws_access_key: "{{AWS_ACCESS_KEY_ID}}"
            aws_secret_key: "{{AWS_SECRET_ACCESS_KEY}}"
            rules:
              - proto: tcp
                ports:
                  - 22
                cidr_ip: 0.0.0.0/0
                rule_desc: allow all on ssh port
            state: present
          register: sg

        - name: output sg info
          debug:
            msg: "security group id: {{sg['group_id']}}"

        - name: Provision instance(s)
          ec2:
            aws_access_key: "{{AWS_ACCESS_KEY_ID}}"
            aws_secret_key: "{{AWS_SECRET_ACCESS_KEY}}"
            key_name: "{{ key_name }}"
            id: "{{ id }}"
            group_id: "{{sg['group_id']}}"
            vpc_subnet_id: "{{ subnet['subnet']['id'] }}"
            image: "{{ image }}"
            instance_type: t2.micro
            region: "{{ region }}"
            wait: true
            count: 1
            state: present

      tags: ["never", "provision"]
